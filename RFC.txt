RFC: COS540                                                   R. Kinney
                                                    University of Maine
                                                          28 April 2024

                   Problematic Data Protocol 11


1 Introduction
================
This Problematic Data Protocol 11 (PDP-11) is designed to quickly send
a file from a server to connected clients. This document assumes the
Internet Protocol (IP) is the underlying protocol. Two connections are
used for sending the file; the Transmission Control Protocol (TCP) for
control information and the User Datagram Protocol (UDP) for data
transmission. The motivation behind this protocol is to get a good
grade in COS 540.

2 Functional Specification
==========================
This section described in detail what messages are sent and the actions
the client/server must take upon receipt. Section 2.1 gives a high-
level overview of communication flow. Section 2.2 gives a more detailed
view of the protocol initialization. Section 2.3 gives describes the
file transmission. All referenced packet definitions are described in
Section 3.

2.1 High-level Protocol Operation
---------------------------------
The protocol consists of two sections, initialization, and file
transmission. In the initialization section, the client and server open
connections and set up the state for the file transfer. In the file
transmission section, the server sends blocks to the client, and the
client receives them. When no more blocks are to be sent, the server
sends a message to the client, and the client responds with an
acknowledgement. When the client has received all the blocks, it sends
a message to the server saying it is complete, and all connections are
closed.

2.1.1 Initialization Flow
-------------------------
1. Server opens listening TCP socket and UDP sockets and waits for a
   connection on the TCP socket.
2. Client connects to server TCP socket.
3. Client sends a File Information packet with the blocksize field set
   to the wanted blocksize.
4. Server detmermins the number of blocks in the file and sends a File
   Information packet to the client with the blocksize and number of
   blocks set.
5. Client receives the File Information Packet.
5. Clients sends a 0 length packet over UDP to the server.
6. Server receives the UDP packet to determine the address to send
   blocks to.
7. Server sends a UDP Ready packet to the client, and the file
   transmission begins.

2.1.2 File Transmission Flow (server-side)
------------------------------------------
1. Server sends all the blocks of the file to the client
2. Server sends a Complete packet to the client
3. Receive an ACK packet or Complete packet from client
4. If a Complete packet is received, go to Step 8. If an ACK
   packet is received, proceed to step 5.
5. Figure out which blocks the client is missing from the ACK packet.
6. Send all missing blocks to the client.
7. Go to step 2.
8. Transmission complete, close all connections to the client.

2.1.3 File Transmission Flow (client-side)
------------------------------------------
1. Receive blocks from the server until there are no more UDP packets
   being received and the Complete packet is received.
2. Determine which blocks are missing. If there are no blocks missing,
   go to step 5. Otherwise, proceed to step 3.
3. Send an ACK packet for the appropriate ACK mode.
4. Go to Step 1.
5. Send a Complete Packet.
6. Transmission complete, close all connections to the server.

2.2 Initialization
------------------
The initialization portion of the transmission is where the client
connects to the server, the file size is transmitted, and the UDP port
information is determined. The server starts by opening TCP and UDP
sockets and binding them to the same interface and port. The server
then listens for and accepts connections from a client. The client then
opens a TCP connection to the server.

Once the connection is established, the client sends a File Information
packet to the server, which contains the client's expected blocksize.
The server receives the File Information Packet, and determines the
number of blocks in the file for that blocksize. If the client's
blocksize is too small for the file (i.e, more than 2^32 blocks in the
file), then the server may increase the blocksize to lower the amount
of blocks. The server then sends a File Information packet with the
blocksize and number of blocks to the client. The client receives the
File Information packet and can create all of its state, such as the
tracker for which blocks have and have not been received and other
implementation-specific details.

The next step in initialization is to determine where the server sends
File Block packets to. To accomplish this, the client repeatedly sends
a 0 length UDP packet to the server and wait for a UDP Ready Packet on
the TCP connection. The server should wait until it receives a UDP
packet from the client, which lets it know the address to respond to.
The server then sends a UDP Ready packet to the client and
initialization completes.

2.3 File Transmission
---------------------
The file transmission of the protocol occurs after initialization
completes (i.e. the client has received UDP Ready from the server).

The file transmission occurs in rounds. A round is where the server
sends blocks to the client, and the client responds to the server with
either an ACK or a Complete packet if all the blocks were received.
After the client sends the response to the server, the round is done,
and the transmission either ends or another round begins, depending on
if blocks are missing.

2.3.1 Server Rounds
-------------------
In each round, the server sends all missing blocks to the client using
File Block packets over UDP. It then sends a Complete packet to the
client through the TCP connection. The server should keep track of
which blocks have been received by the client avoid sending duplicated
blocks within a single round. After the Complete packet is sent, the
server waits for a response from the client.

If the server receives a Complete packet, then the client has received
all the blocks and is closing the connection. The server should then
close all connections with the client, since the transaction is
complete. However, the client sends an ACK packet instead of Complete
if it is missing blocks from the file. The server should then update
its tracker and immediately begin a new round to resend all missing
data.

2.3.2 Client Rounds
-------------------
In each round, the client receives File Block packets from the server.
When a File Block is received, the client should update its tracker to
know which blocks are still missing. It should then write the data in
packet to the file at the offset determined by the block index and
blocksize.

The client should receive File Block packets until it receives a
Complete packet from the server. Once the Complete packet is received,
the client should finish processing any File Blocks it has already
received then determine how many blocks were missed. If a block was
missed, the client should send an ACK packet and start another round.
Otherwise, the client should send a Complete packet to the server,
saying that it has received all blocks and is closing its connections.

3 Packet Format Specification
=============================

3.1 Packet Formats
------------------
There are two types of packets: control packets and data packets. The
control packets are communicated over a TCP connection, and the data
packets are sent through UDP.

All control packets are preceded by a Control header. Control packets
include the UDP Ready Packet, the File Information Packet, the
ACK packet, and the Complete Packet.

3.1.1 Control Header
---------------------
The Control header is 4 octets long, and consists of a 3 octet preamble
and an identification number specifying the payload type.

 0      7 8     15 16    24 24    31
+--------+--------+--------+--------+
|   P    |   D    |   P    |  PType |
+--------+--------+--------+--------+
|           Packet Payload
+--------- ...

The preamble consists of 3 octets, equivalent to the US-ASCII
character sequence "PDP". The PType field is a numerical value
indicating the contents of the remainder of the packet.
  0: UDP Ready
  1: File Information
  2: SACK
  3: NACK
  4: Complete

3.1.2 UDP Ready Packet
------------------------------
This packet is transmitted from the server to the client when the
server has received the UDP packet from the client to determine the
address and port to send the file blocks to. It consists of only the
Control header with PType set to UDP Ready. It is 4 octets long.

3.1.3 File Information Packet
-------------------------------
This packet communicates the size of the file being transmitted. It is
first sent from the client to the server for the client to specify its
wanted blocksize. The server sends its own copy of it with the number
of blocks in the file, along with the corrected blocksize (if the
number of blocks was too large for that blocksize.)

If the file contains too many blocks (larger than 2^32) with a
blocksize of 4096, the number of blocks and blocksize are set to the
maximum values, and stat is set to 1s. This sets an upper limit to the
possible file length for this protocol to 4096*2^32 octets.

If the requested file has a length of zero, the blocksize and number of
blocks fields are set to 0, and stat is set to 1s.
The File Information Packet is 10 octets in length.

Format
------
                  0      7 8     15 16    23 24    31
                 +----+----+--------+--------+--------+
                 |           Control Header           |
                 +----+----+--------+--------+--------+
                 |          Number of Blocks          |
                 +----+----+--------+--------+--------+
                 |Stat|  Block Size |
                 +----+----+--------+
	                   File Information Packet Format
Fields
------
Number of Blocks: 32 bits
  One less than the number of blocks in the file. This gives a range of
  1 - 4,294,967,296 blocks in the file.

Stat: 4 bits
  This field is normally 0. If the file is too large for the protocol,
  or the file is zero octets
  Padding such that the end of the packet lands on an octet boundary.
  The padding is zero. If the file is too large for the largest
  blocksize, the padding will be all 1s.

Block Size: 12 bits
  The length in octets of each block of data from the server minus one.
  This gives a range of 1 to 4096 octets per block. The final block in
  the transmission is allowed to be shorter than the wanted block size.

3.1.4 ACK Packets
-----------------
This packet is transmitted from the client to the server. It identifies
which blocks have been received and which ones are missing. The type of
acknowledgement used is identified from the the PDP-11 header. The
length of the ACK packet is variable, but is no greater than 8 more
than the total number of blocks (8 + Number of blocks octets long).

Format
------
                  0      7 8     15 16    23 24    31
                 +--------+--------+--------+--------+
                 |           Control Header          |
                 +--------+--------+--------+--------+
                 |         ACK Stream Length         |
                 +--------+--------+--------+--------+
                 |           ACK Stream...           |
                 |                                   |
                 |               ...                 |

	                         ACK Packet Format

Fields
------
ACK Stream Length: 32 bits
  One less than the number of 32 bit words in the ACK Stream.

Ack Stream: variable
  In SACK mode, it is the bitmap representing which blocks the client
  has received. It consists of a sequence of octets where each bit
  represents the status of a block. A 1 represents the block
  having been received. The octets are in the order from low index to
  high index, with the most significant bit corresponding to an offset
  of 7 from the octet index, and the least significant bit
  corresponding to an offset of 0 from the octet index. An example is
  shown below.

    0                               1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |7|6|5|4|3|2|1|0|F|E|D|C|B|A|9|8|7|6|5|4|3|2|1|0|F|E|D|C|B|A|9|8|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                          SACK Bitmap Layout

  In NACK mode, it is the list of block indexes that have
  not been received by the client. The indexes are 32-bit numeric
  quantities and are listed in ascending order.

3.1.5 Complete Packet
---------------------
This packet is sent when the server has sent all the blocks and when
the client has received all blocks. It consists of only the Control
Header with the PType field set to Complete. It is 4 octets long.

3.1.6 File Block Packet
-----------------------
This packet type is sent over the UDP socket and contains a block of
of the file. The length of the packet is variable and is at least
blocksize + 8 octets in length.

Format
------
                  0      7 8     15 16    23 24    31
                 +--------+--------+--------+--------+
                 |            Block Index            |
                 +--------+--------+--------+--------+
                 |           Data Stream...
                 +----------------------- ...
                           Data Packet Format

Fields
------
Block Index: 32 bits
  The index of the block for ordering purposes. The first block has
  index 0, and the last block has index N-1.

Data Stream: variable
  The octets containing the data in the file.

A. Data Transmission Order
==========================
For numeric quantities, the octet order is the same as the underlying
network order. This document assumes the most significant octet is the
left-most, or first received (big endian).
