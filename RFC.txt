RFC: COS540                                                   R. Kinney
                                                    University of Maine
                                                          28 April 2024

                   Problematic Data Protocol 11


1 Introduction
================
This Problematic Data Protocol 11 (PDP-11) is designed to efficiently
send a file from a server to connected clients. This document assumes
the Internet Protocol (IP) is the underlying protocol. Two connections
are used for sending the file; the Transmission Control Protocol (TCP)
for control information and the User Datagram Protocol (UDP) for data
transmission. The motivation behind this protocol is to get a good
grade in COS 540.

2 Overview
==========

2.1 Protocol Operation
----------------------

2.1.1 Initialization
--------------------
1. Server opens listening TCP socket and waits for connection
2. Client connects to server.
3. Client sends a File Information packet with the blocksize field set
   to the wanted blocksize size.
4. Server determines minimum possible blocksize from the file size and
   expected blocksize, the number of blocks, and sends the File
   Information packet back to the client with the true blocksize and
   number of blocks.
5. Clients sends a 0 length packet over UDP to the server.
6. Server receives the UDP packet to determine the address to send
   blocks to.
7. Server sends a UDP Ready packet to the client

File transmission begins.

2.1.2 Data Transmission (server-side)
-------------------------------------
1. Server sends all the blocks of the file to the client
2. Server sends a Complete packet to the client
3. Receive an ACK packet or Complete packet from client
4. If a Complete packet is received, go to Step 9. If an ACK
   packet is received, proceed to step 5.
5. Figure out which blocks the client is missing from the ACK packet.
6. Send all missing blocks to the client.
7. Send Complete packet.
8. Go to step 3.
9. Transmission complete, close all connections to the client.

2.1.3 Data Transmission (client-side)
-------------------------------------
1. Receive blocks from the server until there are no more UDP packets
   being received and the Complete packet is received.
2. Determine which blocks are missing. If there are no blocks missing,
   go to step 5. Otherwise, proceed to step 3.
3. Send an ACK packet for the appropriate ACK mode.
4. Go to Step 1.
5. Send a Complete Packet.
6. Transmission complete, close all connections to the server.

3 Specification
===============

3.1 Packet Formats
------------------
There are two types of packets: control packets and data packets. The
control packets are communicated over a TCP connection, and the data
packets are sent through UDP.

All control packets are preceded by a Control header. Control packets
include the UDP Ready Packet, the File Information Packet, the
ACK packet, and the Complete Packet.

3.1.1 Control Header
---------------------
The Control header is 4 octets long, and consists of a 3 octet preamble
and an identification number specifying the payload type.

 0      7 8     15 16    24 24    31
+--------+--------+--------+--------+
|   P    |   D    |   P    |  PType |
+--------+--------+--------+--------+
|           Packet Payload
+--------- ...

The preamble consists of 3 octets, equivalent to the US-ASCII
character sequence "PDP". The PType field is a numerical value
indicating the contents of the remainder of the packet.
  0: UDP Ready
  1: File Information
  2: SACK
  3: NACK
  4: Complete

3.1.2 UDP Ready Packet
------------------------------
This packet is transmitted from the server to the client when the
server has received the UDP packet from the client to determine the
address and port to send the file blocks to. It consists of only the
Control header with PType set to UDP Ready. It is 4 octets long.

3.1.3 File Information Packet
-------------------------------
This packet communicates the size of the file being transmitted. It is
first sent from the client to the server for the client to specify its
wanted blocksize. The server sends its own copy of it with the number
of blocks in the file, along with the corrected blocksize (if the
number of blocks was too large for that blocksize.)

If the file contains too many blocks (larger than 2^32) with a
blocksize of 4096, the number of blocks and blocksize are set to the
maximum values, and stat is set to 1s. This sets an upper limit to the
possible file length for this protocol to 4096*2^32 octets.

If the requested file has a length of zero, the blocksize and number of
blocks fields are set to 0, and stat is set to 1s.
The File Information Packet is 10 octets in length.

Format
------
                  0      7 8     15 16    23 24    31
                 +----+----+--------+--------+--------+
                 |           Control Header           |
                 +----+----+--------+--------+--------+
                 |          Number of Blocks          |
                 +----+----+--------+--------+--------+
                 |Stat|  Block Size |
                 +----+----+--------+
	                   File Information Packet Format
Fields
------
Number of Blocks: 32 bits
  One less than the number of blocks in the file. This gives a range of
  1 - 4,294,967,296 blocks in the file.

Stat: 4 bits
  This field is normally 0. If the file is too large for the protocol,
  or the file is zero octets
  Padding such that the end of the packet lands on an octet boundary.
  The padding is zero. If the file is too large for the largest
  blocksize, the padding will be all 1s.

Block Size: 12 bits
  The length in octets of each block of data from the server minus one.
  This gives a range of 1 to 4096 octets per block. The final block in
  the transmission is allowed to be shorter than the wanted block size.

3.1.4 ACK Packets
-----------------
This packet is transmitted from the client to the server. It identifies
which blocks have been received and which ones are missing. The type of
acknowledgement used is identified from the the PDP-11 header. The
length of the ACK packet is variable, but is no greater than 8 more
than the total number of blocks (8 + Number of blocks octets long).

Format
------
                  0      7 8     15 16    23 24    31
                 +--------+--------+--------+--------+
                 |           Control Header          |
                 +--------+--------+--------+--------+
                 |         ACK Stream Length         |
                 +--------+--------+--------+--------+
                 |           ACK Stream...           |
                 |                                   |
                 |               ...                 |

	                         ACK Packet Format

Fields
------
ACK Stream Length: 32 bits
  One less than the number of 32 bit words in the ACK Stream.

Ack Stream: variable
  In SACK mode, it is the bitmap representing which blocks the client
  has received. It consists of a sequence of octets where each bit
  represents the status of a block. A 1 represents the block
  having been received. The octets are in the order from low index to
  high index, with the most significant bit corresponding to an offset
  of 7 from the octet index, and the least significant bit
  corresponding to an offset of 0 from the octet index. An example is
  shown below.

    0                               1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |7|6|5|4|3|2|1|0|F|E|D|C|B|A|9|8|7|6|5|4|3|2|1|0|F|E|D|C|B|A|9|8|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                          SACK Bitmap Layout

  In NACK mode, it is the list of block indexes that have
  not been received by the client. The indexes are 32-bit numeric
  quantities and are listed in ascending order.

3.1.5 Complete Packet
---------------------
This packet is sent when the server has sent all the blocks and when
the client has received all blocks. It consists of only the Control
Header with the PType field set to Complete. It is 4 octets long.

3.1.6 File Block Packet
-----------------------
This packet type is sent over the UDP socket and contains a block of
of the file. The length of the packet is variable and is at least
blocksize + 8 octets in length.

Format
------
                  0      7 8     15 16    23 24    31
                 +--------+--------+--------+--------+
                 |            Block Index            |
                 +--------+--------+--------+--------+
                 |           Data Stream...
                 +----------------------- ...
                           Data Packet Format

Fields
------
Block Index: 32 bits
  The index of the block for ordering purposes. The first block has
  index 0, and the last block has index N-1.

Data Stream: variable
  The octets containing the data in the file.

A. Data Transmission Order
==========================
For numeric quantities, the octet order is the same as the underlying
network order. This document assumes the most significant octet is the
left-most, or first received (big endian).
